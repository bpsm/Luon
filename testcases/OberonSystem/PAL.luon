module PAL

  type 
    String = ARRAY OF CHAR

  proc ROR*(x,n: integer):integer extern
  
  proc LED(x: integer) 
  begin
    print("LED ")println(x)
  end LED
  
  type Command = PROCEDURE
  proc LDCMD(a,b: array of char):Command extern
  
  proc LDMOD(a: array of char):boolean extern
  
  proc listFiles*(): integer extern

  proc fileName*(i: integer; name: String; maxlen: integer) extern
	
	proc openFile*(CONST filename: array of char): integer extern
	
	proc newFile*(): integer extern

  proc saveFile*(const filename: array of char; buffer: integer): boolean extern

  proc freeFile*(buffer: integer) extern

  proc removeFile*(const filename: array of char): boolean extern
	
  proc renameFile*(const oldName, newName: array of char): boolean extern
	
  proc length*(buffer: integer): integer extern
	
  proc setPos*(buffer, pos: integer): boolean extern
	
  proc atEnd*(buffer: integer): boolean extern

  proc getPos*(buffer: integer): integer extern

  proc writeByte*(buffer: integer; byte_: byte): boolean extern
	
  proc readByte*(buffer: integer): byte extern
	
  proc nextKey*(): char extern
	
  type InputState* = record keys*: set; x*, y*: integer end
  
  proc getState*(state: InputState) extern

  proc processEvents*(sleep:integer): boolean extern

  proc initDisplay*(buflen, w, h: integer): boolean extern
  
  proc GETS( a: INTEGER; var v: SET ) extern
  
  proc PUTS( a: INTEGER; x: SET ) extern
  
  proc getTime*(): integer extern


end PAL
